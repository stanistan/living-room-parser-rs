// There should only be *one* main entry function.
//
// The organization of this grammar is top-level -> down,
// so that the last rules should be literals/terminals
// and the top first rule is the public/exported main
// `parse` function.

pub parse -> Terms = ts:term* {
    Terms(ts)
}

term -> Term
    = value / hole / id / variable / wildcard / ws / word

value -> Term
    = int / null / boolean

int -> Term
    = "0" { Term::Int(0) }
    / s:$([-+]?[1-9]digit*) {
        Term::Int(isize::from_str(s).unwrap())
    }

null -> Term
    = "null" { Term::Null }

boolean -> Term
    = "true" {
        Term::Bool(true)
    }
    / "false" {
        Term::Bool(false)
    }

id -> Term
    = "#" w:$(alnum+) {
        Term::Id(w.to_owned())
    }

variable -> Term
    = "$" w:$(alnum+) {
        Term::Variable(w.to_owned())
    }

word -> Term
    = w:$([^$# _\n\t]+) {
        Term::Word(w.to_owned())
    }

ws -> Term
    = whitespace+ {
        Term::Whitespace
    }

hole -> Term
    = "_" {
        Term::Hole
    }

wildcard -> Term
    = "$" {
        Term::Wildcard
    }

alnum = digit / character
word_delimiter = "$" / "#" / "_" / whitespace

whitespace = "\n" / " " / "\n\r" / "\t"
digit = [0-9]
character = [a-zA-Z]
