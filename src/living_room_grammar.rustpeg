// There should only be *one* main entry function.
//
// The organization of this grammar is top-level -> down,
// so that the last rules should be literals/terminals
// and the top first rule is the public/exported main
// `parse` function.

pub parse -> Vec<Term<'input>> = ts:term* {
    ts
}

term -> Term<'input>
    = value / hole / id / variable / wildcard / ws / word

value -> Term<'input>
    = float / int / null / boolean / string

string -> Term<'input>
    = "\"" s:$(!"\"" !"\n" .)* "\"" {
        Term::String(s)
    }

word -> Term<'input>
    = w:$(word_pattern+) ![0-9] {
        Term::Word(w)
    }
    / w:$(word_char+) {
        Term::Word(w)
    }

int -> Term<'input>
    = "0" { Term::Int(0) }
    / s:$([-+]?[1-9]digit*) {
        Term::Int(i64::from_str(s).unwrap())
    }

float -> Term<'input>
    = s:$( [-+]? digit* frac exp? ) {
        Term::Float(f64::from_str(s).unwrap())
    }
    / s:$( [-+]? frac exp?) {
        Term::Float(f64::from_str(s).unwrap())
    }

null -> Term<'input>
    = "null" { Term::Null }

boolean -> Term<'input>
    = "true" {
        Term::Bool(true)
    }
    / "false" {
        Term::Bool(false)
    }

id -> Term<'input>
    = "#" w:$(alnum*) {
        Term::Id(w)
    }

variable -> Term<'input>
    = "$" w:$(alnum+) {
        Term::Variable(w)
    }

ws -> Term<'input>
    = whitespace+ {
        Term::Whitespace
    }

hole -> Term<'input>
    = "_" {
        Term::Hole
    }

wildcard -> Term<'input>
    = "$" {
        Term::Wildcard
    }

alnum = digit / character
word_delimiter = "$" / "#" / "_" / whitespace / digit
word_char = [^# $ 0-9 _ . "]
word_pattern = word_char+ "."+

exp = ("e" / "E") ("-" / "+")? digit*<1,>
frac = "." digit*<1,>

whitespace = "\n" / " " / "\n\r" / "\t"
digit = [0-9]
character = [a-zA-Z]
